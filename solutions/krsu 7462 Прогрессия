/*
* by: senb1, but not algorithm
*/

//includes
#include <algorithm>
#include <iomanip>
#include <iostream>
#include <locale>
#include <numeric>
#include <cstring>
#include <cmath>

#include <deque>
#include <list>
#include <map>
#include <stack>
#include <string>
#include <vector>
#include <array>
#include <queue>
#include <set>

using namespace std;

//macros
#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define yes cout << "YES\n"
#define no cout << "NO\n"
#define fr first
#define sc second
#define endl "\n"
#define ll long long
#define ull unsigned long long
#define ld long double
#define nl cout << "\n";

const ll mod = 2022;

//functions

ll binpow(ll a, ll b) { // returns a to the power of b modulo mod
    ll res = 1;
    while (b > 0) {
        if (b & 1)
            res = res * a % mod;
        a = a * a % mod;
        b >>= 1 % mod;
    }
    return res % mod;
}

ll gcd(ll a, ll b) { // returns greatest common divisor of a and b
    if (a % b == 0)
        return b;
    if (b % a == 0)
        return a;
    if (a > b)
        return gcd(a % b, b);
    return gcd(a, b % a);
}

ll lcm(ll a, ll b) { // returns least common multiplyer of a and b
    return (a * b) / gcd(a, b);
}

bool isPrime(int x) { // checks wheather x is prime or not
    if (x <= 1) return false;
    for (int i = 2; i <= sqrt(x) + 1; i++) {
        if (x % i == 0)
            return false;
    }
    return true;
}

auto get(vector<int> a, vector<int> b) {
    if (a[0] * b[1] >= b[0] * a[1]) return a;
    return b;
}

int main() {
    ios::sync_with_stdio(0); cin.tie(0);
    //cout << fixed << setprecision(12);
    //setlocale(LC_ALL, "RUS");

    int a, b, c, d;
    cin >> a >> b >> c >> d;
    vector<int> v = { a + d, 1 };

    for (int i = 2; i <= d - a; i++) {
        bool fl = 1;
        for (int j = 1; j <= i; j++)
            if (b * i < a * i + j * (d - a) and a * i + (d - a) * j < c * i)
                fl = 0;
        if (fl)
            v = get(v, { (i + 1) * (a + d), 2 });
    }

    int di = gcd(v[0], v[1]);
    v[0] /= di;
    v[1] /= di;
    cout << v[0] << '/' << v[1];

}

/*
 

*/
